// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.0
// source: proto/uploader.proto

package uploader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UploaderService_UploadFile_FullMethodName    = "/uploader.UploaderService/UploadFile"
	UploaderService_ListFiles_FullMethodName     = "/uploader.UploaderService/ListFiles"
	UploaderService_GetFileInfo_FullMethodName   = "/uploader.UploaderService/GetFileInfo"
	UploaderService_SetFileActive_FullMethodName = "/uploader.UploaderService/SetFileActive"
	UploaderService_GetFileActive_FullMethodName = "/uploader.UploaderService/GetFileActive"
)

// UploaderServiceClient is the client API for UploaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploaderServiceClient interface {
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	GetFileInfo(ctx context.Context, in *GetFileInfoRequest, opts ...grpc.CallOption) (*GetFileInfoResponse, error)
	SetFileActive(ctx context.Context, in *SetFileActiveRequest, opts ...grpc.CallOption) (*SetFileActiveResponse, error)
	GetFileActive(ctx context.Context, in *GetFileActiveRequest, opts ...grpc.CallOption) (*GetFileActiveResponse, error)
}

type uploaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploaderServiceClient(cc grpc.ClientConnInterface) UploaderServiceClient {
	return &uploaderServiceClient{cc}
}

func (c *uploaderServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, UploaderService_UploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploaderServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, UploaderService_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploaderServiceClient) GetFileInfo(ctx context.Context, in *GetFileInfoRequest, opts ...grpc.CallOption) (*GetFileInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileInfoResponse)
	err := c.cc.Invoke(ctx, UploaderService_GetFileInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploaderServiceClient) SetFileActive(ctx context.Context, in *SetFileActiveRequest, opts ...grpc.CallOption) (*SetFileActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetFileActiveResponse)
	err := c.cc.Invoke(ctx, UploaderService_SetFileActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploaderServiceClient) GetFileActive(ctx context.Context, in *GetFileActiveRequest, opts ...grpc.CallOption) (*GetFileActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileActiveResponse)
	err := c.cc.Invoke(ctx, UploaderService_GetFileActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploaderServiceServer is the server API for UploaderService service.
// All implementations must embed UnimplementedUploaderServiceServer
// for forward compatibility.
type UploaderServiceServer interface {
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error)
	SetFileActive(context.Context, *SetFileActiveRequest) (*SetFileActiveResponse, error)
	GetFileActive(context.Context, *GetFileActiveRequest) (*GetFileActiveResponse, error)
	mustEmbedUnimplementedUploaderServiceServer()
}

// UnimplementedUploaderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUploaderServiceServer struct{}

func (UnimplementedUploaderServiceServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedUploaderServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedUploaderServiceServer) GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedUploaderServiceServer) SetFileActive(context.Context, *SetFileActiveRequest) (*SetFileActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFileActive not implemented")
}
func (UnimplementedUploaderServiceServer) GetFileActive(context.Context, *GetFileActiveRequest) (*GetFileActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileActive not implemented")
}
func (UnimplementedUploaderServiceServer) mustEmbedUnimplementedUploaderServiceServer() {}
func (UnimplementedUploaderServiceServer) testEmbeddedByValue()                         {}

// UnsafeUploaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploaderServiceServer will
// result in compilation errors.
type UnsafeUploaderServiceServer interface {
	mustEmbedUnimplementedUploaderServiceServer()
}

func RegisterUploaderServiceServer(s grpc.ServiceRegistrar, srv UploaderServiceServer) {
	// If the following call pancis, it indicates UnimplementedUploaderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UploaderService_ServiceDesc, srv)
}

func _UploaderService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploaderService_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploaderService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploaderService_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploaderService_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderServiceServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploaderService_GetFileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderServiceServer).GetFileInfo(ctx, req.(*GetFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploaderService_SetFileActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFileActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderServiceServer).SetFileActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploaderService_SetFileActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderServiceServer).SetFileActive(ctx, req.(*SetFileActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploaderService_GetFileActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderServiceServer).GetFileActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploaderService_GetFileActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderServiceServer).GetFileActive(ctx, req.(*GetFileActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UploaderService_ServiceDesc is the grpc.ServiceDesc for UploaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uploader.UploaderService",
	HandlerType: (*UploaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _UploaderService_UploadFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _UploaderService_ListFiles_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _UploaderService_GetFileInfo_Handler,
		},
		{
			MethodName: "SetFileActive",
			Handler:    _UploaderService_SetFileActive_Handler,
		},
		{
			MethodName: "GetFileActive",
			Handler:    _UploaderService_GetFileActive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/uploader.proto",
}
