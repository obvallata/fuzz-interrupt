// Code generated by MockGen. DO NOT EDIT.
// Source: distributor.go
//
// Generated by this command:
//
//	mockgen -source distributor.go -package mock -destination ./mock/mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	distributor "diploma/gen/distributor"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDistributorServiceServer is a mock of DistributorServiceServer interface.
type MockDistributorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDistributorServiceServerMockRecorder
	isgomock struct{}
}

// MockDistributorServiceServerMockRecorder is the mock recorder for MockDistributorServiceServer.
type MockDistributorServiceServerMockRecorder struct {
	mock *MockDistributorServiceServer
}

// NewMockDistributorServiceServer creates a new mock instance.
func NewMockDistributorServiceServer(ctrl *gomock.Controller) *MockDistributorServiceServer {
	mock := &MockDistributorServiceServer{ctrl: ctrl}
	mock.recorder = &MockDistributorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributorServiceServer) EXPECT() *MockDistributorServiceServerMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockDistributorServiceServer) DownloadFile(arg0 context.Context, arg1 *distributor.DownloadFileRequest) (*distributor.DownloadFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", arg0, arg1)
	ret0, _ := ret[0].(*distributor.DownloadFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockDistributorServiceServerMockRecorder) DownloadFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockDistributorServiceServer)(nil).DownloadFile), arg0, arg1)
}

// mustEmbedUnimplementedDistributorServiceServer mocks base method.
func (m *MockDistributorServiceServer) mustEmbedUnimplementedDistributorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDistributorServiceServer")
}

// mustEmbedUnimplementedDistributorServiceServer indicates an expected call of mustEmbedUnimplementedDistributorServiceServer.
func (mr *MockDistributorServiceServerMockRecorder) mustEmbedUnimplementedDistributorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDistributorServiceServer", reflect.TypeOf((*MockDistributorServiceServer)(nil).mustEmbedUnimplementedDistributorServiceServer))
}
